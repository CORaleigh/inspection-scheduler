"use strict";(globalThis.webpackChunkinspections_app=globalThis.webpackChunkinspections_app||[]).push([[5461],{65461:(e,t,r)=>{r.r(t),r.d(t,{BufferObject:()=>o.Z,FramebufferObject:()=>l.Z,Program:()=>s.Z,ProgramCache:()=>h.Z,Renderbuffer:()=>c.Z,RenderingContext:()=>d.Z,ShaderCompiler:()=>u.Z,Texture:()=>a.Z,VertexArrayObject:()=>i.Z,createContextOrErrorHTML:()=>n.s,createProgram:()=>f.H,glslifyDefineMap:()=>f.K});var n=r(49800),s=r(9256),o=r(44070),a=r(51378),i=r(45412),c=r(15880),l=r(53634),f=r(65706),h=r(68267),d=r(6710),u=r(56648)},56648:(e,t,r)=>{r.d(t,{Z:()=>n});const n=class{constructor(e){this.readFile=e}resolveIncludes(e){return this.resolve(e)}resolve(e,t=new Map){if(t.has(e))return t.get(e);const r=this.read(e);if(!r)throw new Error(`cannot find shader file ${e}`);const n=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;let s=n.exec(r);const o=[];for(;null!=s;)o.push({path:s[1],start:s.index,length:s[0].length}),s=n.exec(r);let a=0,i="";return o.forEach((e=>{i+=r.slice(a,e.start),i+=t.has(e.path)?"":this.resolve(e.path,t),a=e.start+e.length})),i+=r.slice(a),t.set(e,i),i}read(e){return this.readFile(e)}}},65706:(e,t,r)=>{r.d(t,{H:()=>o,K:()=>s});var n=r(9256);function s(e){let t="";for(const r in e){const n=e[r];if("boolean"==typeof n)n&&(t+=`#define ${r}\n`);else if("number"==typeof n)t+=`#define ${r} ${n.toFixed()}\n`;else if("object"==typeof n){const e=n.options;let s=0;for(const r in e)t+=`#define ${e[r]} ${(s++).toFixed()}\n`;t+=`#define ${r} ${e[n.value]}\n`}}return t}function o(e,t,r,s){r=r||{},s=s||"";const o="function"==typeof t.shaders?t.shaders(r):t.shaders;return new n.Z(e,s+o.vertexShader,s+o.fragmentShader,t.attributes)}}}]);
//# sourceMappingURL=5461.2872a1d6.chunk.js.map