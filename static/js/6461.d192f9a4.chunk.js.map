{"version":3,"file":"static/js/6461.d192f9a4.chunk.js","mappings":"mOAIu5C,QAAnkC,MAAQ,YAAMA,CAAOC,GAAG,MAAMC,QAAQC,EAAAA,EAAAA,GAAEF,EAAEG,KAAKH,EAAEI,SAAS,OAAOH,GAAGA,EAAEI,QAAQ,CAACC,SAAAA,CAAUJ,GAAGA,EAAEK,WAAWN,EAAAA,EAAEO,SAASN,EAAEK,YAAYL,EAAEO,OAAOP,EAAEO,OAAOT,EAAAA,EAAEQ,SAASN,EAAEO,QAAQ,KAAK,MAAMC,EAAEC,KAAKC,WAAWN,UAAUJ,GAAG,OAAOW,QAAQC,QAAQJ,GAAGA,EAAEL,SAAS,CAAC,sBAAMU,CAAiBf,GAAG,IAAIC,EAAEU,KAAKC,WAAWI,EAAAA,EAAER,SAASR,EAAEiB,gBAAgBjB,EAAEkB,YAAY,mBAAmB,OAAOjB,EAAEU,KAAKC,iBAAY,EAAOX,EAAEkB,aAAaC,QAAQT,KAAKC,WAAWO,aAAaD,WAAWlB,EAAEkB,WAAW,CAACG,OAAAA,CAAQrB,GAAG,MAAME,EAAES,KAAKC,WAAWU,cAAcrB,EAAAA,EAAEO,SAASR,EAAEuB,eAAevB,EAAEwB,eAAe,OAAOX,QAAQC,QAAQZ,GAAGA,EAAEG,SAAS,CAACoB,4BAAAA,CAA6BzB,GAAG,MAAME,GAAEQ,EAAAA,EAAAA,IAAET,EAAAA,EAAEO,SAASR,EAAEuB,gBAAgB,OAAOV,QAAQC,QAAQZ,EAAE,CAACwB,KAAAA,CAAM1B,GAAG,MAAME,GAAEyB,EAAAA,EAAAA,IAAE1B,EAAAA,EAAEO,SAASR,EAAEuB,eAAevB,EAAE4B,SAAS5B,EAAE6B,qBAAqB,OAAO3B,GAAGA,EAAE4B,SAAS,CAAC9B,EAAEC,KAAKC,EAAE6B,IAAI9B,EAAE,MAAMD,OAAE,EAAOA,EAAEK,SAAS,IAAIQ,QAAQC,QAAQZ,EAAE,CAAC,wBAAM8B,CAAmBhC,GAAG,MAAME,EAAEF,EAAEiC,eAAeC,KAAKlC,GAAGA,EAAE,IAAIC,EAAAA,EAAED,GAAG,OAAOU,GAAEyB,EAAAA,EAAAA,IAAEjC,EAAEF,EAAEoC,eAAe,IAAIpC,EAAEqC,MAAM,OAAO3B,GAAGA,EAAEL,SAAS,MAAMsB,GAAEW,EAAAA,EAAAA,IAAE5B,EAAEV,EAAEuC,cAAcvC,EAAEqC,MAAMrC,EAAEwC,cAAcxC,EAAEyC,eAAe,OAAOd,GAAGA,EAAEtB,QAAQ,E","sources":["../node_modules/@arcgis/core/layers/support/RasterWorker.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.19/esri/copyright.txt for details.\n*/\nimport e from\"../../geometry/Extent.js\";import\"../../geometry.js\";import r from\"./PixelBlock.js\";import{decode as s}from\"./rasterFormats/RasterCodec.js\";import{estimateStatisticsHistograms as o,split as t,mosaic as i,approximateTransform as m}from\"./rasterFunctions/pixelUtils.js\";import l from\"../../renderers/support/RasterSymbolizer.js\";class n{async decode(e){const r=await s(e.data,e.options);return r&&r.toJSON()}symbolize(s){s.pixelBlock=r.fromJSON(s.pixelBlock),s.extent=s.extent?e.fromJSON(s.extent):null;const o=this.symbolizer.symbolize(s);return Promise.resolve(o&&o.toJSON())}async updateSymbolizer(e){var r;this.symbolizer=l.fromJSON(e.symbolizerJSON),e.histograms&&\"rasterStretch\"===(null==(r=this.symbolizer)?void 0:r.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const s=this.symbolizer.simpleStretch(r.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(s&&s.toJSON())}estimateStatisticsHistograms(e){const s=o(r.fromJSON(e.srcPixelBlock));return Promise.resolve(s)}split(e){const s=t(r.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return s&&s.forEach(((e,r)=>{s.set(r,null==e?void 0:e.toJSON())})),Promise.resolve(s)}async mosaicAndTransform(e){const s=e.srcPixelBlocks.map((e=>e?new r(e):null)),o=i(s,e.srcMosaicSize);if(!e.coefs)return o&&o.toJSON();const t=m(o,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return t&&t.toJSON()}}export default n;\n"],"names":["decode","e","r","s","data","options","toJSON","symbolize","pixelBlock","fromJSON","extent","o","this","symbolizer","Promise","resolve","updateSymbolizer","l","symbolizerJSON","histograms","rendererJSON","type","stretch","simpleStretch","srcPixelBlock","stretchParams","estimateStatisticsHistograms","split","t","tileSize","maximumPyramidLevel","forEach","set","mosaicAndTransform","srcPixelBlocks","map","i","srcMosaicSize","coefs","m","destDimension","sampleSpacing","interpolation"],"sourceRoot":""}